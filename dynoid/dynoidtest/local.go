package dynoidtest

import (
	"context"
	"fmt"
	"log/slog"
	"net/http"

	"github.com/coreos/go-oidc/v3/oidc"

	"github.com/heroku/x/dynoid"
)

// LocalConfiguration provides methods for working with a local issuer
// configured with ConfigureLocal
type LocalConfiguration struct {
	ctx context.Context
	iss *Issuer
}

// ConfigureLocal sets up the environment with a local DynoID issuer and
// generates tokens for the audiences provided.
//
// The returned LocalConfiguration provides methods for working with the issuer.
func ConfigureLocal(audiences []string, opts ...IssuerOpt) (*LocalConfiguration, error) {
	return ConfigureLocalWithContext(context.Background(), audiences, opts...)
}

func ConfigureLocalWithContext(ctx context.Context, audiences []string, opts ...IssuerOpt) (*LocalConfiguration, error) {
	ctx, iss, err := NewWithContext(ctx, opts...)
	if err != nil {
		return nil, fmt.Errorf("failed to create issuer (%w)", err)
	}

	if err := GenerateDefaultFS(iss, audiences...); err != nil {
		return nil, fmt.Errorf("failed to generate DefaultFS (%w)", err)
	}

	return &LocalConfiguration{ctx, iss}, nil
}

func (c *LocalConfiguration) Context() context.Context {
	return c.ctx
}

// The Middleware should be inserted in the middleware stack before any
// functions that use dynoid are called.
func (c *LocalConfiguration) Middleware() func(http.Handler) http.Handler {
	return LocalIssuer(c.iss)
}

// Handler mints tokens for the configured issuer using for the audience
// specified by the audience query param.
func (c *LocalConfiguration) Handler() http.Handler {
	return Issue(c.iss)
}

// GenerateToken mints a token for the given audience using the configured
// issuer.
func (c *LocalConfiguration) GenerateToken(audience string) (string, error) {
	return c.iss.GenerateIDToken(audience)
}

// Configure dynoid.DefaultFS to use tokens generated by the provided issuer
// for the audiences listed.
func GenerateDefaultFS(iss *Issuer, audiences ...string) error {
	tokens := map[string]string{}
	for _, au := range audiences {
		token, err := iss.GenerateIDToken(au)
		if err != nil {
			return fmt.Errorf("error creating token for %q (%w)", au, err)
		}

		tokens[au] = token
	}

	dynoid.DefaultFS = NewFS(tokens)

	return nil
}

// Configures the oidc client to use the issuer provided.
func LocalIssuer(iss *Issuer) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			slog.InfoContext(r.Context(), "setting oidc client context")
			next.ServeHTTP(w, r.WithContext(oidc.ClientContext(r.Context(), iss.HTTPClient())))
		})
	}
}

// The Issue http.Handler generates test tokens via a local Issuer using the
// provided opts.
//
// A query param 'audience' is expected.
func Issue(iss *Issuer) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		au := r.URL.Query().Get("audience")
		if au == "" {
			http.Error(w, "'audience' query param is required", http.StatusBadRequest)
			return
		}

		token, err := iss.GenerateIDToken(au)
		if err != nil {
			http.Error(w, fmt.Sprintf("error generating token (%v)", err), http.StatusInternalServerError)
			return
		}

		fmt.Fprint(w, token)
	})
}
